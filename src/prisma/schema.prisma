// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String @db.VarChar(32)         @id @default(cuid())
  name          String? @db.VarChar(32) 
  email         String  @db.VarChar(32)         @unique
  emailVerified DateTime?
  image         String? @db.VarChar(255)
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  articles      Article[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String @db.VarChar(32) 
  type              String @db.VarChar(32)
  provider          String @db.VarChar(32)
  providerAccountId String @db.VarChar(255)
  refresh_token     String? @db.VarChar(255) 
  access_token      String? @db.VarChar(255)
  expires_at        Int?
  token_type        String? @db.VarChar(32)
  scope             String? @db.VarChar(32) 
  id_token          String? @db.VarChar(255)
  session_state     String? @db.VarChar(32)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String @db.VarChar(32)
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String @db.VarChar(32)
  token      String @db.VarChar(255) 
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String @db.VarChar(32)
  providerAccountId    String @db.VarChar(255)
  credentialPublicKey  String @db.Text
  counter              Int 
  credentialDeviceType String @db.VarChar(32)
  credentialBackedUp   Boolean
  transports           String? @db.VarChar(255) // Comma-separated list of transports
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Article {
  id              Int             @id @default(autoincrement())
  userId          String @db.VarChar(32) 
  title           String @db.VarChar(255)
  content         String @db.Text
  summary         String @db.Text
  sourceUrl       String @db.VarChar(255)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user            User            @relation(fields: [userId], references: [id])

}
