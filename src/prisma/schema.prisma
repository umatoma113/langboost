// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid()) @db.VarChar(64)
  name          String?         @db.VarChar(32)
  email         String          @unique @db.VarChar(64)
  emailVerified DateTime?
  image         String?         @db.VarChar(255)
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  articles      Article[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  userWords     UserWord[]
  quizHistories QuizHistory[]
  words         Word[] @relation("UserToWords")
}

model Account {
  userId            String  @db.VarChar(64)
  type              String  @db.VarChar(32)
  provider          String  @db.VarChar(32)
  providerAccountId String  @db.VarChar(255)
  refresh_token     String? @db.VarChar(255)
  access_token      String? @db.VarChar(255)
  expires_at        Int?
  token_type        String? @db.VarChar(32)
  scope             String? @db.VarChar(32)
  id_token          String? @db.VarChar(255)
  session_state     String? @db.VarChar(32)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String   @db.VarChar(64)
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String   @db.VarChar(64)
  token      String   @db.VarChar(255)
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String  @db.VarChar(64)
  providerAccountId    String  @db.VarChar(255)
  credentialPublicKey  String  @db.Text
  counter              Int
  credentialDeviceType String  @db.VarChar(32)
  credentialBackedUp   Boolean
  transports           String? @db.VarChar(255)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Article {
  id        Int      @id @default(autoincrement())
  userId    String   @db.VarChar(64)
  title     String   @db.VarChar(255)
  content   String   @db.Text
  summary   String   @db.Text
  translation String?  @db.Text
  sourceUrl String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  sentences      Sentence[]
  articleQuizzes ArticleQuiz[]
  words Word[]
}

model Sentence {
  id        Int      @id @default(autoincrement())
  articleId Int
  english   String   @db.Text
  japanese  String   @db.Text
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  article Article @relation(fields: [articleId], references: [id])
}

model Word {
  id           Int      @id @default(autoincrement())
  word         String   @db.Text
  meaning      String   @db.Text
  userId       String   @db.VarChar(64)
  partOfSpeech String?  @db.VarChar(100)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  articleId   Int?

  user          User           @relation("UserToWords", fields: [userId], references: [id])
  wordExamples  WordExample[]
  quizTemplates QuizTemplate[]
  userWords     UserWord[]
  article     Article? @relation(fields: [articleId], references: [id])

  @@unique([userId, word])
}

model WordExample {
  id        Int      @id @default(autoincrement())
  wordId    Int
  english   String   @db.Text
  japanese  String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  word Word @relation(fields: [wordId], references: [id])
}

model UserWord {
  id             Int      @id @default(autoincrement())
  userId         String   @db.VarChar(64)
  wordId         Int
  registeredAt   DateTime
  lastTestedAt   DateTime
  level          Int      @default(1)      
  nextReviewDate DateTime  @default(now())
  correctCount   Int
  incorrectCount Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  word Word @relation(fields: [wordId], references: [id])

  @@unique([userId, wordId])
}

model QuizTemplate {
  id        Int      @id @default(autoincrement())
  wordId    Int
  quizType  String   @db.VarChar(50)
  question  String   @db.VarChar(512)
  choice1   String   @db.VarChar(255)
  choice2   String   @db.VarChar(255)
  choice3   String   @db.VarChar(255)
  choice4   String   @db.VarChar(255)
  answer    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  word          Word          @relation(fields: [wordId], references: [id])
  quizHistories QuizHistory[]
}

model QuizHistory {
  id             Int      @id @default(autoincrement())
  userId         String   @db.VarChar(64)
  wordId         Int?
  quizTemplateId Int
  userAnswer     Int
  isCorrect      Boolean
  executedAt     DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id])
  quizTemplate QuizTemplate @relation(fields: [quizTemplateId], references: [id])
}

model ArticleQuiz {
  id          Int      @id @default(autoincrement())
  articleId   Int
  question    String   @db.VarChar(512)
  choice1     String   @db.VarChar(255)
  choice2     String   @db.VarChar(255)
  choice3     String   @db.VarChar(255)
  choice4     String   @db.VarChar(255)
  answer      Int
  explanation String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  article Article @relation(fields: [articleId], references: [id])
}